# подключение библиотек
import math
from math import sqrt
print(dir(math))
print(math.sqrt.__doc__)
print(sqrt(2), end="\n\n")
"""
__dos__ можно узнать о функциях эл. библиотеки, но нужно подключать библиотеку
(import math)
но для использования библиотек лучше подключать ее так (from math import)
"""

a = "asda"
b = 123
print(type(a))  # тип данных
"a = input()"  # получаем на входе строку, поэтому нужно преобразовывать в нужный формат
print(bin(101))  # строка. внутри скобок записываем число в 2-ой. на выходе 10-ая
print(oct(674))  # строка
print(hex(56), end="\n\n")  # тоже
f = 0x16
print(f)
print(type(f), end="\n\n")

# битовые опирации
a = 123
x = 687969
d = 60
print(x >> 2)
print(d << 2)
print(a & d, a ^ d, a | d, sep="\t")
print(divmod(15, 4))
print(divmod(-15, 4))
print(divmod(15, -4))
print(divmod(-15, -4), end="\n\n")

# принцип работы дивмод (а//b)*b + (a%b)
#                        = x       = y

# Управление вводом
print("HI", "Max")
print("123", "456")
print("Me name is maxim", 'Hello', 'Maxim', sep="\t")  # между элементами - (sep = "\ ")
print("Me name is maxim", "Hello", end="\t")  # в конце строки
print("Max")
print("123", "456", sep="\\")
print("123", end="\\")
print(213)
print(345, end="\n\n")
'''
n перевод на новую стоку
t горизонтальная табуляция
'\"   вставка данного символа
также можно делать двойную \n\n

'''

# форматированный вывод

# флаг ширина. точность
# флаг. - выравнивание по левому краю (пробеллы справа), 0 заполняет нулями свободное место нулями, + показывает знак
#
# Общий вид форматированного вывода
# S(s) - строка D(d) - целое E(e) - с плавающей точкой (экспонента) F(f)- обычное вещественное   G(g) - или е или f
print("Hello %s num %d с точностью %f" % ("world", 123.88734, 0.57875e-3))
print("%5.4s % 15.3f" % ("qweiq", 12648.5642))
# Выставление длины не влияет на формать D если только добавляет пробелы, но не укорачивает число
# Выставление точности не укорачивает числа, но добавляет нули спереди
# Вещественный формат, не смотря на длину выводит весь остато + по умочинию длина остатка равна 6
# Е всегда выводи е поумолчанию точность равна 6 из любого числа делает мантисо (1 <= m < 10)
# G переходит в эксп если дляна целого числа больше 6 или дробная часть меньше -4
# если вводим вещественное считывает длину целой части (0 не в счет) и выводит дробную часть = 6 - кол чисел цылой части
# при изменении точности : точность равна целой округлит, больше выведет еще остаток, меньше переход в е


# Срезы строки
S = "Kotik.myrmotik"
print(S[4])
print(S[9:2:-1])  # начало:конец(не включительно):шаг
print(S[-2])

# operator
a = int(input())
if a < -5:
    print('Low')
elif -5 <= a <= 5:
    print('Mid')
else:
    print('High')



# Нод вычитанием
a = int(input("a = "))
b = int(input("b = "))
while a != b:
    if a > b:
        a = a-b
    else:
        b = b - a
print(a)

print()
# НОД делением
print(a, b)
while b != 0:
    a, b = b, a%b
    print(a, b)
print(a)


n = int(input("n = "))
k = 2
b = True
if n != 1:
    while k*k <= n and b:
        b = n % k
        k += 1
    print(bool(b))
else:
    print("False")
